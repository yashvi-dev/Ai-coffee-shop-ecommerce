
## ☕️ AI-Powered Coffee E-commerce Website

### 💡 **Project Overview**
This is a **full-stack e-commerce platform** designed for personalized coffee shopping. The project is enhanced using **OpenAI API** for intelligent product suggestions based on user preferences. Users can take a **coffee quiz**, subscribe to flexible plans (weekly/monthly), and find nearby retailers using **location-based services**.

---

## 🧱 **Tech Stack**

### ✅ Frontend
- **React 19**, **React Router DOM 7** – SPA routing & component-based architecture.
- **MUI (Material UI)** – Modern, responsive UI components.
- **Framer Motion** – Animations for better UX.
- **Axios** – For HTTP requests to the backend.
- **Vite** – Fast development server & build tool.
- **Proxy** – `"http://localhost:3000"` to communicate with the Express backend.

### ✅ Backend
- **Node.js** + **Express** – REST API backend with route handling and middleware.
- **MongoDB** + **Mongoose** – NoSQL database for storing users, products, subscriptions, quiz data.
- **CORS** + **dotenv** – To handle cross-origin requests and secure environment variables.
- **OpenAI API** – For coffee quiz recommendation engine.

---

## 🧭 **Architecture Breakdown**

Here’s a breakdown of the **system architecture** and how everything flows together:

```
                ┌─────────────────────────────────────────────────────┐
                │                     Frontend                        │
                │ React + MUI + Axios + React Router + Framer Motion │
                └─────────────────────────────────────────────────────┘
                                │            ▲
                                ▼            │
               (HTTP Requests) Axios         │ (JSON Responses)
                                ▼            ▲
              ┌─────────────────────────────────────────────────────┐
              │                     Backend                         │
              │      Node.js + Express + dotenv + CORS              │
              └─────────────────────────────────────────────────────┘
               │             │               │                │
               ▼             ▼               ▼                ▼
        MongoDB (User)   MongoDB         OpenAI API     Geolocation API
        (Subscriptions) (Products)       (Coffee Quiz)   (Store Finder)
```

---

## 🔍 **Detailed Feature Explanation**

### 1. 🧠 **AI-Powered Coffee Quiz**
- **Frontend**: Users answer questions about taste preferences, brewing method, caffeine level, etc.
- **Backend**: These inputs are sent via Axios to a `/recommend` endpoint.
- **Integration**:
  - Backend sends prompt to **OpenAI's API (GPT-3/4)** with user preferences.
  - Receives a tailored coffee product or blend suggestion.
  - Sends this result back to frontend, which displays it with images, text, etc.

### 2. 💳 **Subscription Model**
- Users can choose from **weekly** or **monthly** plans for coffee delivery.
- Subscriptions stored in **MongoDB** (`User`, `Subscription` schema).
- Can be tied to a payment gateway (Stripe can be added for future upgrade).
- Backend endpoints like `/subscribe`, `/cancel`, `/get-plan` handle the logic.

### 3. 📍 **Location-Based Store Finder**
- Uses `navigator.geolocation` on frontend to get user’s coordinates.
- Sends location to `/stores/nearby` endpoint.
- Backend fetches coffee store data (could be static or from a maps API) and filters based on proximity.
- Returns a list of stores sorted by distance.

### 4. 🛒 **E-commerce Core**
- **Product Listing Page** with cards showing coffee products.
- Add to cart / Buy now.
- Each product includes name, description, origin, taste notes, and price.
- Data pulled from MongoDB via Express routes.

---

## 🧰 **Folder Structure (Suggested)**

### 📦 `backend/`
```
├── server.js
├── routes/
│   ├── quiz.js
│   ├── subscription.js
│   └── stores.js
├── models/
│   ├── User.js
│   ├── Subscription.js
│   └── Product.js
├── controllers/
│   ├── quizController.js
│   ├── subscriptionController.js
│   └── storeController.js
├── config/
│   └── db.js
├── utils/
│   └── openaiHelper.js
```

### 📦 `frontend/`
```
├── src/
│   ├── App.jsx
│   ├── components/
│   │   ├── QuizForm.jsx
│   │   ├── ProductCard.jsx
│   │   ├── SubscriptionPlans.jsx
│   │   └── StoreFinder.jsx
│   ├── pages/
│   │   ├── Home.jsx
│   │   ├── Quiz.jsx
│   │   ├── Subscriptions.jsx
│   │   └── Stores.jsx
│   └── utils/
│       └── api.js (Axios instance)
```

---

## 📈 **Scalability & Future Enhancements**
- Add **Stripe** for real payments.
- Implement **JWT-based Authentication**.
- Store quiz history & refine model based on user feedback.
- Deploy frontend with Vercel and backend with Render/Heroku.

---

## 🔥 In Interviews, Highlight:
- **"This project shows my full-stack skills, AI integration using OpenAI, and system design ability."**
- **"I followed clean architecture and separation of concerns – routes, controllers, models."**
- **"Used MUI and Framer Motion to make the UX elegant and interactive."**
